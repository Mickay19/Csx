const http = require('http');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Render
const dbPath = process.env.NODE_ENV === 'production' 
  ? '/tmp/csx.db'  // –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  : './csx.db';

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', dbPath);

// –°–æ–∑–¥–∞–µ–º/–ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite:', err.message);
    } else {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbPath);
        initDatabase();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
    db.serialize(() => {
        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.run(`CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –¢–∞–±–ª–∏—Ü–∞ —Å–±–æ—Ä–æ–∫
        db.run(`CREATE TABLE IF NOT EXISTS builds (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            build_name TEXT NOT NULL,
            weapon_data TEXT,
            settings_data TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
        )`);

        // –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
        db.run(`CREATE TABLE IF NOT EXISTS comparisons (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            comparison_name TEXT NOT NULL,
            weapon1_id TEXT,
            weapon2_id TEXT,
            parameters TEXT,
            results TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
        )`);

        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
function parseBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                if (!body) {
                    resolve(null);
                    return;
                }
                resolve(JSON.parse(body));
            } catch (error) {
                reject(error);
            }
        });
        req.on('error', reject);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function authenticateRequest(authHeader) {
    if (!authHeader) {
        return { authenticated: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' };
    }
    
    const tokenMatch = authHeader.match(/token_(\d+)_/);
    if (!tokenMatch) {
        return { authenticated: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' };
    }
    
    const userId = parseInt(tokenMatch[1]);
    return { authenticated: true, userId: userId };
}

const server = http.createServer(async (req, res) => {
    // CORS headers –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    const allowedOrigins = [
        'https://csx-frontend.onrender.com', // –í–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ Render
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:5500',
        'http://127.0.0.1:5500'
    ];
    
    const origin = req.headers.origin;
    if (allowedOrigins.includes(origin)) {
        res.setHeader('Access-Control-Allow-Origin', origin);
    } else {
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
        res.setHeader('Access-Control-Allow-Origin', '*');
    }
    
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, *');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    console.log(`üì® ${req.method} ${req.url}`);

    // Health check
    if (req.url === '/api/health' && req.method === 'GET') {
        db.get('SELECT COUNT(*) as users_count FROM users', (err, usersRow) => {
            db.get('SELECT COUNT(*) as builds_count FROM builds', (err, buildsRow) => {
                db.get('SELECT COUNT(*) as comparisons_count FROM comparisons', (err, compRow) => {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ 
                        status: 'OK', 
                        database: 'SQLite Connected',
                        database_path: dbPath,
                        environment: process.env.NODE_ENV || 'development',
                        users_count: usersRow.users_count,
                        builds_count: buildsRow.builds_count,
                        comparisons_count: compRow.comparisons_count,
                        timestamp: new Date().toISOString()
                    }));
                });
            });
        });
        return;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (req.url === '/api/auth/register' && req.method === 'POST') {
        try {
            const body = await parseBody(req);
            
            if (!body) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ' }));
                return;
            }

            const { username, email, password } = body;
            
            if (!username || !email || !password) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }));
                return;
            }

            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(password, 12);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.run(
                'INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
                [username, email, hashedPassword],
                function(err) {
                    if (err) {
                        if (err.message.includes('UNIQUE constraint failed')) {
                            res.writeHead(400, { 'Content-Type': 'application/json' });
                            res.end(JSON.stringify({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }));
                        } else {
                            throw err;
                        }
                    } else {
                        console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username} (ID: ${this.lastID})`);
                        
                        res.writeHead(201, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({
                            success: true,
                            user: { id: this.lastID, username, email },
                            token: `token_${this.lastID}_${Date.now()}`,
                            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
                        }));
                    }
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' }));
        }
        return;
    }

    // –í—Ö–æ–¥
    if (req.url === '/api/auth/login' && req.method === 'POST') {
        try {
            const body = await parseBody(req);
            
            if (!body) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ' }));
                return;
            }

            const { username, password } = body;
            
            if (!username || !password) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }));
                return;
            }

            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.get(
                'SELECT * FROM users WHERE username = ?',
                [username],
                async (err, user) => {
                    if (err) throw err;
                    
                    if (!user) {
                        res.writeHead(400, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }));
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                    const isPasswordValid = await bcrypt.compare(password, user.password);
                    if (!isPasswordValid) {
                        res.writeHead(400, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }));
                        return;
                    }

                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${username} (ID: ${user.id})`);

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        success: true,
                        user: { id: user.id, username: user.username, email: user.email },
                        token: `token_${user.id}_${Date.now()}`,
                        message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
                    }));
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' }));
        }
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    if (req.url === '/api/builds/save' && req.method === 'POST') {
        try {
            const body = await parseBody(req);
            const authHeader = req.headers['authorization'];
            
            const auth = authenticateRequest(authHeader);
            if (!auth.authenticated) {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: auth.error }));
                return;
            }

            if (!body || !body.build_name) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }));
                return;
            }

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏:', body.build_name);

            db.run(
                'INSERT INTO builds (user_id, build_name, weapon_data, settings_data) VALUES (?, ?, ?, ?)',
                [
                    auth.userId,
                    body.build_name,
                    JSON.stringify(body.weapon_data || {}),
                    JSON.stringify(body.settings_data || {})
                ],
                function(err) {
                    if (err) throw err;
                    
                    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞: "${body.build_name}" (ID: ${this.lastID})`);
                    
                    res.writeHead(201, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        success: true,
                        buildId: this.lastID,
                        message: '–°–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
                    }));
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏' }));
        }
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.url === '/api/builds/user' && req.method === 'GET') {
        try {
            const authHeader = req.headers['authorization'];
            const auth = authenticateRequest(authHeader);
            
            if (!auth.authenticated) {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: auth.error }));
                return;
            }

            db.all(
                'SELECT * FROM builds WHERE user_id = ? ORDER BY created_at DESC',
                [auth.userId],
                (err, builds) => {
                    if (err) throw err;
                    
                    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–±–æ—Ä–æ–∫: ${builds.length} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${auth.userId}`);
                    
                    const buildsWithParsedData = builds.map(build => ({
                        ...build,
                        weapon_data: JSON.parse(build.weapon_data),
                        settings_data: JSON.parse(build.settings_data)
                    }));

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(buildsWithParsedData));
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±–æ—Ä–æ–∫:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±–æ—Ä–æ–∫' }));
        }
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if (req.url === '/api/comparisons/save' && req.method === 'POST') {
        try {
            const body = await parseBody(req);
            const authHeader = req.headers['authorization'];
            
            const auth = authenticateRequest(authHeader);
            if (!auth.authenticated) {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: auth.error }));
                return;
            }

            if (!body) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ' }));
                return;
            }

            if (!body.comparison_name) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }));
                return;
            }

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', body.comparison_name);

            db.run(
                'INSERT INTO comparisons (user_id, comparison_name, weapon1_id, weapon2_id, parameters, results) VALUES (?, ?, ?, ?, ?, ?)',
                [
                    auth.userId,
                    body.comparison_name,
                    body.weapon1_id,
                    body.weapon2_id,
                    JSON.stringify(body.parameters || {}),
                    JSON.stringify(body.results || {})
                ],
                function(err) {
                    if (err) throw err;
                    
                    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: "${body.comparison_name}" (ID: ${this.lastID})`);
                    
                    res.writeHead(201, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        success: true,
                        comparisonId: this.lastID,
                        message: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'
                    }));
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è' }));
        }
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.url === '/api/comparisons/user' && req.method === 'GET') {
        try {
            const authHeader = req.headers['authorization'];
            const auth = authenticateRequest(authHeader);
            
            if (!auth.authenticated) {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: auth.error }));
                return;
            }

            db.all(
                'SELECT * FROM comparisons WHERE user_id = ? ORDER BY created_at DESC',
                [auth.userId],
                (err, comparisons) => {
                    if (err) throw err;
                    
                    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: ${comparisons.length} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${auth.userId}`);
                    
                    const comparisonsWithParsedData = comparisons.map(comp => ({
                        ...comp,
                        parameters: JSON.parse(comp.parameters),
                        results: JSON.parse(comp.results)
                    }));

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify(comparisonsWithParsedData));
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π' }));
        }
        return;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    if (req.url.startsWith('/api/builds/') && req.method === 'DELETE') {
        try {
            const authHeader = req.headers['authorization'];
            const auth = authenticateRequest(authHeader);
            
            if (!auth.authenticated) {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: auth.error }));
                return;
            }

            const buildId = parseInt(req.url.split('/').pop());
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            db.run(
                'DELETE FROM builds WHERE id = ? AND user_id = ?',
                [buildId, auth.userId],
                function(err) {
                    if (err) throw err;
                    
                    if (this.changes === 0) {
                        res.writeHead(404, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: '–°–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–µ —É–¥–∞–ª–µ–Ω–∏—è' }));
                        return;
                    }

                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ ID: ${buildId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${auth.userId}`);

                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        success: true,
                        message: '–°–±–æ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
                    }));
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏' }));
        }
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (req.url === '/api/stats' && req.method === 'GET') {
        try {
            db.get('SELECT COUNT(*) as users_count FROM users', (err, usersRow) => {
                db.get('SELECT COUNT(*) as builds_count FROM builds', (err, buildsRow) => {
                    db.get('SELECT COUNT(*) as comparisons_count FROM comparisons', (err, compRow) => {
                        res.writeHead(200, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({
                            users_count: usersRow.users_count,
                            builds_count: buildsRow.builds_count,
                            comparisons_count: compRow.comparisons_count,
                            server_uptime: process.uptime()
                        }));
                    });
                });
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' }));
        }
        return;
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if (req.url === '/api/debug/data' && req.method === 'GET') {
        db.all('SELECT * FROM users', (err, users) => {
            db.all('SELECT * FROM builds', (err, builds) => {
                db.all('SELECT * FROM comparisons', (err, comparisons) => {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        users: users,
                        builds: builds,
                        comparisons: comparisons
                    }, null, 2));
                });
            });
        });
        return;
    }

    // 404 - –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ 
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        available_endpoints: [
            'GET  /api/health',
            'POST /api/auth/register', 
            'POST /api/auth/login',
            'POST /api/builds/save',
            'GET  /api/builds/user',
            'DELETE /api/builds/:id',
            'POST /api/comparisons/save',
            'GET  /api/comparisons/user',
            'GET  /api/stats',
            'GET  /api/debug/data'
        ]
    }));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log('üöÄ CSX Backend Server —Å SQLite –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
    console.log(`‚úÖ Health: http://localhost:${PORT}/api/health`);
});