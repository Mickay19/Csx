// api.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
class CSX_API {
    constructor() {
        this.baseURL = 'http://localhost:3000/api';
        this.token = localStorage.getItem('csx_token');
    }

    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        console.log(`üîÑ API Call: ${options.method || 'GET'} ${url}`);
        
        try {
            const config = {
                headers: {
                    'Content-Type': 'application/json',
                    ...(this.token && { 'Authorization': this.token }),
                    ...options.headers
                },
                ...options
            };

            if (options.body) {
                config.body = JSON.stringify(options.body);
            }

            const response = await fetch(url, config);
            
            if (!response.ok) {
                const errorText = await response.text();
                let errorMessage = `HTTP ${response.status}`;
                
                try {
                    const errorData = JSON.parse(errorText);
                    errorMessage = errorData.error || errorMessage;
                } catch {
                    errorMessage = errorText || errorMessage;
                }
                
                throw new Error(errorMessage);
            }

            const data = await response.json();
            console.log('‚úÖ API Success:', data);
            return data;

        } catch (error) {
            console.error('‚ùå API Error:', error.message);
            
            if (error.message.includes('Failed to fetch')) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥: node server.js');
            }
            
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    async health() {
        return await this.request('/health');
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    async register(userData) {
        const result = await this.request('/auth/register', {
            method: 'POST',
            body: userData
        });
        
        if (result.token) {
            this.token = result.token;
            localStorage.setItem('csx_token', this.token);
            localStorage.setItem('csx_user', JSON.stringify(result.user));
        }
        
        return result;
    }

    // –í—Ö–æ–¥
    async login(credentials) {
        const result = await this.request('/auth/login', {
            method: 'POST',
            body: credentials
        });
        
        if (result.token) {
            this.token = result.token;
            localStorage.setItem('csx_token', this.token);
            localStorage.setItem('csx_user', JSON.stringify(result.user));
        }
        
        return result;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    async saveBuild(buildData) {
        return await this.request('/builds/save', {
            method: 'POST',
            body: buildData
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getBuilds() {
        return await this.request('/builds/user');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    async saveComparison(comparisonData) {
        return await this.request('/comparisons/save', {
            method: 'POST',
            body: comparisonData
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    async getComparisons() {
        return await this.request('/comparisons/user');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        return await this.request('/stats');
    }

    // –í—ã—Ö–æ–¥
    logout() {
        this.token = null;
        localStorage.removeItem('csx_token');
        localStorage.removeItem('csx_user');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    isAuthenticated() {
        return !!this.token && !!localStorage.getItem('csx_user');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUser() {
        const user = localStorage.getItem('csx_user');
        return user ? JSON.parse(user) : null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    getAuthHeaders() {
        return {
            'Authorization': this.token,
            'Content-Type': 'application/json'
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
const csxAPI = new CSX_API();