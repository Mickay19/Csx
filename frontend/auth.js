// auth.js - –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
class AuthSystem {
    constructor() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        this.apiBaseUrl = window.location.hostname.includes('render.com') 
            ? 'https://csx-backend.onrender.com/api'
            : 'http://localhost:3000/api';
        
        this.currentUser = null;
        this.token = null;
        this.init();
        
        console.log('üîß API URL:', this.apiBaseUrl);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    init() {
        this.loadFromStorage();
        this.updateUI();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    loadFromStorage() {
        this.token = localStorage.getItem('csx_token');
        const userData = localStorage.getItem('csx_user');
        if (userData) {
            this.currentUser = JSON.parse(userData);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
    saveToStorage() {
        if (this.token) {
            localStorage.setItem('csx_token', this.token);
        }
        if (this.currentUser) {
            localStorage.setItem('csx_user', JSON.stringify(this.currentUser));
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    clearStorage() {
        localStorage.removeItem('csx_token');
        localStorage.removeItem('csx_user');
        this.token = null;
        this.currentUser = null;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async register(userData) {
        try {
            const response = await fetch(`${this.apiBaseUrl}/auth/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }

            const data = await response.json();
            this.setAuthData(data);
            return data;

        } catch (error) {
            console.error('Registration error:', error);
            throw error;
        }
    }

    // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async login(username, password) {
        try {
            const response = await fetch(`${this.apiBaseUrl}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
            }

            const data = await response.json();
            this.setAuthData(data);
            return data;

        } catch (error) {
            console.error('Login error:', error);
            throw error;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setAuthData(authData) {
        this.token = authData.token;
        this.currentUser = authData.user;
        this.saveToStorage();
        this.updateUI();
    }

    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logout() {
        this.clearStorage();
        this.updateUI();
        window.location.reload();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkAuth() {
        const isAuthenticated = !!(this.token && this.currentUser);
        this.updateUI();
        return isAuthenticated;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        const authElements = document.querySelectorAll('.auth-required');
        const unauthElements = document.querySelectorAll('.unauth-required');
        const userDisplay = document.getElementById('userDisplay');
        const authSection = document.getElementById('authSection');

        if (this.currentUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            authElements.forEach(el => el.style.display = 'block');
            unauthElements.forEach(el => el.style.display = 'none');
            
            if (userDisplay) {
                userDisplay.textContent = this.currentUser.username;
            }
            
            if (authSection) {
                authSection.innerHTML = `
                    <span style="color: white; margin-right: 10px;">–ü—Ä–∏–≤–µ—Ç, ${this.currentUser.username}</span>
                    <button onclick="authSystem.logout()" class="auth-button">–í—ã–π—Ç–∏</button>
                `;
            }
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            authElements.forEach(el => el.style.display = 'none');
            unauthElements.forEach(el => el.style.display = 'block');
            
            if (userDisplay) {
                userDisplay.textContent = '';
            }
            
            if (authSection) {
                authSection.innerHTML = `
                    <button onclick="showAuthModal()" class="auth-button">–í–æ–π—Ç–∏</button>
                `;
            }
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    getAuthHeaders() {
        const headers = {
            'Content-Type': 'application/json'
        };
        
        if (this.token) {
            headers['Authorization'] = this.token;
        }
        
        return headers;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    isTokenValid() {
        return !!(this.token && this.currentUser);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getUserInfo() {
        return this.currentUser;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    async checkServerHealth() {
        try {
            const response = await fetch(`${this.apiBaseUrl}/health`);
            if (!response.ok) throw new Error('Server not responding');
            return await response.json();
        } catch (error) {
            throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    showAuthModal() {
        const authModal = document.getElementById('authModal');
        if (authModal) {
            authModal.style.display = 'block';
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authSystem = new AuthSystem();