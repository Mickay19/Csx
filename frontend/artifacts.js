// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
const artifactsDB = [
    {
        id: 1,
        name: "–ö–∞–º–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫",
        stats: { bulletResistance: 15, anomalyResistance: 5 }
    },
    {
        id: 2, 
        name: "–ù–æ—á–Ω–∞—è –∑–≤–µ–∑–¥–∞",
        stats: { anomalyResistance: 20, radiationResistance: 10 }
    },
    {
        id: 3,
        name: "–í—ã–≤–µ—Ä—Ç", 
        stats: { movementSpeed: 15, stamina: 10 }
    },
    {
        id: 4,
        name: "–ü—É—Å—Ç—ã—à–∫–∞",
        stats: { bulletResistance: 8, anomalyResistance: 8, radiationResistance: 5 }
    },
    {
        id: 5,
        name: "–ö—Ä–æ–≤—å –∫–∞–º–Ω—è",
        stats: { bulletResistance: 25, anomalyResistance: -5, movementSpeed: -3 }
    }
];

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤
const suitsDB = {
    combat: {
        name: "–ë–æ–µ–≤–æ–π –∫–æ—Å—Ç—é–º",
        baseStats: { bulletResistance: 80, anomalyResistance: 40, radiationResistance: 20 }
    },
    scientific: {
        name: "–ù–∞—É—á–Ω—ã–π –∫–æ—Å—Ç—é–º", 
        baseStats: { bulletResistance: 30, anomalyResistance: 80, radiationResistance: 60 }
    },
    combined: {
        name: "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Å—Ç—é–º",
        baseStats: { bulletResistance: 60, anomalyResistance: 60, radiationResistance: 40 }
    }
};

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
const containersDB = {
    standard: {
        name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
        slots: 4,
        bonusStats: {}
    },
    military: {
        name: "–í–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
        slots: 3,
        bonusStats: { bulletResistance: 15, movementSpeed: -5 }
    },
    scientific: {
        name: "–ù–∞—É—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", 
        slots: 3,
        bonusStats: { anomalyResistance: 20, radiationResistance: 10 }
    }
};

let currentSuit = 'combat';
let currentContainer = 'standard';
let currentBuild = Array(containersDB[currentContainer].slots).fill(null);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    renderSuitButtons();
    renderContainerButtons();
    renderArtifactLibrary();
    updateEquipmentInfo();
    renderContainerSlots();
    updateTotalStats();
}

// –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –∫–æ—Å—Ç—é–º–æ–≤
function renderSuitButtons() {
    const container = document.getElementById('suitButtons');
    if (!container) return;
    
    container.innerHTML = '';
    
    Object.keys(suitsDB).forEach(suitId => {
        const button = document.createElement('button');
        button.className = `equipment-button ${suitId === currentSuit ? 'active' : ''}`;
        button.textContent = suitsDB[suitId].name;
        button.onclick = () => selectSuit(suitId);
        container.appendChild(button);
    });
}

// –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function renderContainerButtons() {
    const container = document.getElementById('containerButtons');
    if (!container) return;
    
    container.innerHTML = '';
    
    Object.keys(containersDB).forEach(containerId => {
        const button = document.createElement('button');
        button.className = `equipment-button ${containerId === currentContainer ? 'active' : ''}`;
        button.textContent = containersDB[containerId].name;
        button.onclick = () => selectContainer(containerId);
        container.appendChild(button);
    });
}

// –í—ã–±–æ—Ä –∫–æ—Å—Ç—é–º–∞
function selectSuit(suitId) {
    currentSuit = suitId;
    renderSuitButtons();
    updateEquipmentInfo();
    updateTotalStats();
}

// –í—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function selectContainer(containerId) {
    currentContainer = containerId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
    const newSlots = containersDB[containerId].slots;
    if (newSlots !== currentBuild.length) {
        const oldBuild = [...currentBuild];
        currentBuild = Array(newSlots).fill(null);
        
        for (let i = 0; i < Math.min(oldBuild.length, newSlots); i++) {
            if (oldBuild[i]) {
                currentBuild[i] = oldBuild[i];
            }
        }
    }
    
    renderContainerButtons();
    renderContainerSlots();
    updateEquipmentInfo();
    updateTotalStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
function updateEquipmentInfo() {
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Å—Ç—é–º–µ
    const suitInfo = document.getElementById('suitInfo');
    if (suitInfo) {
        const suit = suitsDB[currentSuit];
        suitInfo.innerHTML = `
            <strong>${suit.name}</strong><br>
            ‚Ä¢ –ü—É–ª–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å: ${suit.baseStats.bulletResistance}%<br>
            ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π: ${suit.baseStats.anomalyResistance}%<br>
            ‚Ä¢ –†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞: ${suit.baseStats.radiationResistance}%<br>
        `;
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    const containerInfo = document.getElementById('containerInfo');
    if (containerInfo) {
        const container = containersDB[currentContainer];
        const bonuses = Object.entries(container.bonusStats)
            .filter(([key, value]) => value !== 0)
            .map(([key, value]) => {
                const statNames = {
                    bulletResistance: '–ü—É–ª–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å',
                    anomalyResistance: '–ó–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π',
                    radiationResistance: '–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞',
                    movementSpeed: '–°–∫–æ—Ä–æ—Å—Ç—å'
                };
                return `${value > 0 ? '+' : ''}${value}% ${statNames[key]}`;
            });

        containerInfo.innerHTML = `
            <strong>${container.name}</strong><br>
            ‚Ä¢ –°–ª–æ—Ç–æ–≤ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${container.slots}<br>
            ${bonuses.length > 0 ? `‚Ä¢ –ë–æ–Ω—É—Å—ã: ${bonuses.join(', ')}<br>` : ''}
        `;
    }
}

// –†–µ–Ω–¥–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
function renderArtifactLibrary() {
    const library = document.getElementById('artifactLibrary');
    if (!library) return;
    
    library.innerHTML = '';

    artifactsDB.forEach(artifact => {
        const artifactElement = document.createElement('div');
        artifactElement.className = 'artifact-item';
        artifactElement.innerHTML = `
            <h4>${artifact.name}</h4>
            <div class="artifact-stats">
                ${getArtifactStatsText(artifact)}
            </div>
        `;
        
        artifactElement.addEventListener('click', () => {
            const emptySlot = findEmptySlot();
            if (emptySlot !== -1) {
                addArtifactToSlot(emptySlot, artifact);
            } else {
                alert('–í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã! –°–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ —Å–ª–æ—Ç.');
            }
        });

        library.appendChild(artifactElement);
    });
}

// –†–µ–Ω–¥–µ—Ä —Å–ª–æ—Ç–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function renderContainerSlots() {
    const container = document.getElementById('containerSlots');
    if (!container) return;
    
    container.innerHTML = '';
    
    for (let i = 0; i < containersDB[currentContainer].slots; i++) {
        const slot = document.createElement('div');
        slot.className = `container-slot ${currentBuild[i] ? 'occupied' : 'empty'}`;
        slot.dataset.slot = i;
        
        if (currentBuild[i]) {
            const artifact = currentBuild[i];
            slot.innerHTML = `
                <div class="artifact-item">
                    <h4>${artifact.name}</h4>
                    <div class="artifact-stats">
                        ${getArtifactStatsText(artifact)}
                    </div>
                    <button class="remove-artifact-btn" onclick="removeArtifact(${i})" title="–£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç">
                        ‚úï
                    </button>
                </div>
            `;
        } else {
            slot.innerHTML = `
                <div class="slot-placeholder">
                    <span class="plus-icon">+</span>
                    <span class="slot-text">–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç</span>
                </div>
            `;
        }
        
        slot.addEventListener('click', (e) => {
            if (!e.target.closest('.remove-artifact-btn') && !currentBuild[i]) {
                if (artifactsDB.length > 0) {
                    const selectedArtifact = artifactsDB[0];
                    addArtifactToSlot(i, selectedArtifact);
                }
            }
        });

        container.appendChild(slot);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getArtifactStatsText(artifact) {
    const stats = [];
    if (artifact.stats.bulletResistance) stats.push(`üí• ${artifact.stats.bulletResistance}%`);
    if (artifact.stats.anomalyResistance) stats.push(`‚ö° ${artifact.stats.anomalyResistance}%`);
    if (artifact.stats.radiationResistance) stats.push(`‚ò¢Ô∏è ${artifact.stats.radiationResistance}%`);
    if (artifact.stats.movementSpeed) stats.push(`üèÉ ${artifact.stats.movementSpeed}%`);
    if (artifact.stats.stamina) stats.push(`üí™ ${artifact.stats.stamina}%`);
    
    return stats.join(' ');
}

function findEmptySlot() {
    return currentBuild.findIndex(slot => slot === null);
}

function addArtifactToSlot(slotIndex, artifact) {
    currentBuild[slotIndex] = artifact;
    renderContainerSlots();
    updateTotalStats();
}

function removeArtifact(slotIndex) {
    currentBuild[slotIndex] = null;
    renderContainerSlots();
    updateTotalStats();
    event.stopPropagation();
}

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateTotalStats() {
    const suit = suitsDB[currentSuit];
    const container = containersDB[currentContainer];
    
    let totalStats = { 
        bulletResistance: suit.baseStats.bulletResistance,
        anomalyResistance: suit.baseStats.anomalyResistance,
        radiationResistance: suit.baseStats.radiationResistance,
        movementSpeed: 0,
        stamina: 0
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    Object.keys(container.bonusStats).forEach(stat => {
        totalStats[stat] += container.bonusStats[stat];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    currentBuild.forEach(artifact => {
        if (artifact) {
            Object.keys(artifact.stats).forEach(stat => {
                totalStats[stat] = (totalStats[stat] || 0) + artifact.stats[stat];
            });
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const statsElement = document.getElementById('totalStats');
    if (statsElement) {
        statsElement.innerHTML = `
            <li>üí• –ü—É–ª–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å: ${Math.round(totalStats.bulletResistance)}%</li>
            <li>‚ö° –ó–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π: ${Math.round(totalStats.anomalyResistance)}%</li>
            <li>‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞: ${Math.round(totalStats.radiationResistance)}%</li>
            <li>üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${Math.round(totalStats.movementSpeed)}%</li>
            <li>üí™ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: ${Math.round(totalStats.stamina)}%</li>
        `;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
async function saveBuild() {
    if (!csxAPI.isAuthenticated()) {
        alert('–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
    }

    const buildName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏:');
    if (!buildName) return;

    const buildData = {
        build_name: buildName,
        weapon_data: {
            suit: currentSuit,
            container: currentContainer,
            artifacts: currentBuild.filter(a => a !== null)
        },
        settings_data: {
            total_stats: calculateTotalStats(),
            timestamp: new Date().toISOString()
        }
    };

    try {
        const result = await csxAPI.saveBuild(buildData);
        alert(`‚úÖ –°–±–æ—Ä–∫–∞ "${buildName}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
    } catch (error) {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–±–æ—Ä–æ–∫
async function loadSavedBuilds() {
    if (!csxAPI.isAuthenticated()) {
        alert('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
    }

    try {
        const builds = await csxAPI.getBuilds();
        
        if (builds.length === 0) {
            alert('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–∫');
            return;
        }

        const buildList = builds.map(build => `‚Ä¢ ${build.build_name}`).join('\n');
        const selectedName = prompt(`–í–∞—à–∏ —Å–±–æ—Ä–∫–∏:\n${buildList}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:`);
        
        if (!selectedName) return;

        const selectedBuild = builds.find(build => build.build_name === selectedName);
        
        if (selectedBuild) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–±–æ—Ä–∫—É
            currentSuit = selectedBuild.weapon_data.suit;
            currentContainer = selectedBuild.weapon_data.container;
            currentBuild = selectedBuild.weapon_data.artifacts || Array(containersDB[currentContainer].slots).fill(null);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            renderSuitButtons();
            renderContainerButtons();
            renderContainerSlots();
            updateEquipmentInfo();
            updateTotalStats();
            
            alert(`‚úÖ –°–±–æ—Ä–∫–∞ "${selectedName}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
        } else {
            alert('–°–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

    } catch (error) {
        alert(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateTotalStats() {
    const suit = suitsDB[currentSuit];
    const container = containersDB[currentContainer];
    
    let stats = { ...suit.baseStats };
    
    Object.keys(container.bonusStats).forEach(stat => {
        stats[stat] += container.bonusStats[stat];
    });
    
    currentBuild.forEach(artifact => {
        if (artifact) {
            Object.keys(artifact.stats).forEach(stat => {
                stats[stat] += artifact.stats[stat];
            });
        }
    });
    
    return stats;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', init);
// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏
async function loadBuildFromId(buildId) {
    try {
        const builds = await csxAPI.getBuilds();
        const build = builds.find(b => b.id === parseInt(buildId));
        
        if (build) {
            currentSuit = build.weapon_data.suit;
            currentContainer = build.weapon_data.container;
            currentBuild = build.weapon_data.artifacts || Array(containersDB[currentContainer].slots).fill(null);
            
            renderSuitButtons();
            renderContainerButtons();
            renderContainerSlots();
            updateEquipmentInfo();
            updateTotalStats();
            
            console.log(`‚úÖ –°–±–æ—Ä–∫–∞ "${build.build_name}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±–æ—Ä–∫–∏:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–±–æ—Ä–∫–∏ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function checkUrlForBuild() {
    const urlParams = new URLSearchParams(window.location.search);
    const buildId = urlParams.get('load');
    
    if (buildId && csxAPI.isAuthenticated()) {
        loadBuildFromId(buildId);
    }
}

// –î–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ –≤ –∫–æ–Ω–µ—Ü DOMContentLoaded
document.addEventListener('DOMContentLoaded', function() {
    init();
    checkUrlForBuild();
});